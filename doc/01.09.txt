01.09

기본자료형 8가지
---------------------
참조자료형(String,Scanner)-java.lang.String,java.util.Scanner
이 외에 프로그램에서 필요한 사용자 정의 자료형(클래스)을 만들어 쓸 수 있다.

객체지향에서는 행위(메소드)가 중요하지만 데이터를 중심으로 추상화하여 객체 및 클래스를 설계하는 경우도 존재한다. Datat Trasnfer Object = DTO -> 데이터를 전달해줄 수 있는 객체

매개변수를 필드 값에 넣어주는 setter

boolean타입의 setter메소드 이름은 is를 빼고 setActivated이런식으로 나타낸다.

DTO형태는 관례적으로 많이는 쓰이지만 필드이름이 바뀌면 setName처럼 같이 getter,setter이름도 바뀌기 때문에 유지보수성은 약하다.

임포트할 때 다른 패키지 내에 클래스명이 겹치지는 경우가 있기 때문에 조심해서 해주자.
ex(Date클래스)

필드,생성자,메소드 순서로 통상적으로 쓴다.

User user = new User();은 객체 생성 문구이다. 이때 User()을 생성자라고 한다.많은 생성자들 중에 기본생성자라고 한다.

생성자도 일종의 메소드이다. 생성자는 반환형이 없으며 이름은 클래스명과 동일해야한다.

설정해놓은 생성자가 0개일 때 컴파일러에서 기본생성자를 만들어줌

java.util.Date 클래스의 기본 생성자를 통해 객체를 생성하면
        * 현재 프로그램이 동작하는 운영체제 상의 날짜/시간 정보를 이용해 인스턴스가 생성 된다

this()는 같은 클래스의 다른 생성자를 호출하는 기능이다.

Scanner는 기본생성자가 없기 때문에 Scanner sc= new Scanner(System.in)처럼 안에 반드시 매개변수를 작성해주어야한다.

메소드 시그니처란?
메소드명과 파라미터 선언부를 의미하며 접근제한자,반환형은 오버로딩 성립 요건에 해당하지 않는다. 

-------------------------------------------------------------------------------------------------

매개변수로 사용가능한 자료형

클래스 자료형 배열 ex)User user = new User();을 User[] users = new User[100];도 가능

기본 자료형은 "값을 전달"하므로 메소드 내에서 변경 시켜도 main에서의 변수는 변화가 없다.배열과 클래스은 "주소 값을 전달"하므로 얕은 복사가 일어나 동일한 배열을 다루고 있다.따라서 값의 변화가 그대로 출력된다.

가변인자public void testVariableLengthArrayParameter(String name,String... hobby) {
    } 매개변수에 name은 고정이고 이후 hobby가 인자로 몇개가 들어올지 모른다.상관없다라는 의미 ...을 통해 표현,hobby는 배열처럼 다뤄준다.

가변인자 메소드 오버로딩은 모호성 때문에 에러남

-----------------------------------------------------------------------------------------------------
static과 final키워드

heap = 동적 메모리 -> 프로그램이 진행되는 동안 공간이 할당됬다 안했다 할 수 있다.
static = 정적 메모리 -> 프로그램이 시작될 시 할당 된다. 필드와 메소드에 붙힐 수 있다.
인스턴스 생성 없이 프로그램이 시작 되면 무조건 정적 메모리에 공간이 할당,공간이 여러가지 만들어지지 않는다. 
Member m1 = new member();
Member m2 = new member();
Member m3 = new member();
heap에는 3개의 영역이 만들어지지만 static공간에는 1개만 만들어진다.여러개의 heap 공간의 개체들이 한 공간을 참조함.,클래스명.을 통해 접근할 수 있다.

static이 붙으면 프로그램이 실행되는 순간 객체가 생성되던 말던 아~무상관 없이 static영역에 공간이 할당된다.
 
final키워드는 변경 불가의 의미를 가진다.
 1. 지역 변수 : 초기화 이후 값 변경 불가
     2. 매개 변수 : 호출 시 전달한 인자 변경 불가
     3. 인스턴스 변수 : 인스턴스 생성 후 초기화 이후에 값 변경 불가
     4. 클래스 변수(static) : 프로그램 시작 이후 값 변경 불가
     5. non-static메소드 : 메소드재작성(overriding) 불가
     6. static 메소드 : 메소드 재작성(overriding) 불가
     7. 클래스 : 상속 불가*/

static 필드에서 생성자를 이용한 초기화는 불가능하다.
  생성자는 인스턴스 생성 시점에 호출되고, static은 프로그램이 시작 될 때 할당 되므로
 초기화 되지 않은 상태로 선언 된 것과 동일하다.*/

초기화 블럭 역시 프로그램이 시작될 때 공간이 할당되며 실행된다.

public static final 을 상수 필드라고 칭한다.

지역변수는 반드시 초기화해야함..(heap에 들어갈 때는 초기화 자동으로 됨)

























