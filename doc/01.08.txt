01.08

배열의 정렬

sort
Arrays 라는 클래스는 배열에 관련된 기능를 정리해놓은 클래스이다.
.tosort->오름차순 정렬
.toString -> 대괄호사이에 배열의 값들을 출력해줌.

변수의 두 값을 변경하는 법
int num1 =10;
int num2 = 20;
일 때 
num1 = num2
num2 = num1을 하면 같은 값이 출력한다.
고로 두개의 공간이 아닌 하나의 공간을 더 만들어 keep을 해놓고 대입한 후 keep한 값을 다시 대입해주면 스왑이 잘 일어난다.

swap 알고리즘 : 자리를 바꿔주기 위해 임시변수를 이용하는 것

선택정렬과 순차정렬 차이점 : 선택정렬은 비교한다고해서 바로 값을 바꾸지는 않음. 최소값을 발견하면 그때 값을 바꿈.쭉 탐색 후 최소값을 발견 후 딱 한번만 스왑을함.

버블정렬 : 인접한 두개의 데이터를 비교하며 정렬해나간다. 뒤에가 우선 고정된다.

삽입정렬 : 배열하나하나 값을 어디에 들어가야할지를 고민한 뒤 삽입해준다.

배열에 중복 값 없이 담기

----------------------------------------------------------------------------------------------------

객체지향의 3대원칙 : 캡슐화,상속,다형성
(4대로 늘리면) 캡슐화,상속,다형성,추상화

1. 변수 (하나의 자료형 하나의 값)
2. 배열 (하나의 자료형 여러개의 값)

객체=instance
클래스명 변수명 = new 클래스명();<- 객체를 생성하는 구문이다.

배열은 heap공간에 인덱스를 통해 접근,
객체는 heap공간에 .(참조연산자)를 통해 접근

클래스 = 사용자 정의 자료형
기본자료형(int,double,boolean)이외 자료형은 모두 참조자료형인데 String과 클래스가 있다.

필드에 직접접근(.을통해 필드 값을 불러오는 것)하는 경우 발생할 수 있는 문제점을 이해한다.
1. 필드에 올바르지 않은 값이 들어가도 통제가 불가능하다는 것이 직접 접근의 문제점이다. -> 메소드를 통해 간접 접근

this = 인스턴스의 주소 값

2. Monster클래스의 필드 값중 하나인 이름인 name이 kinds로 바뀌였을 때 객체.name이라고 선언한 것을 모두 바꾸어주어야한다. 값의 변화에 의존성이 높다. 의존성이 높다 = 유지보수성이 낮아진다. 하지만 메소드로 받았을 경우 필드 값인 name이 kind로 바뀌였을 때 메소드내에서만 변경해주면 application에서는 영향을 받지 않는다.
Monster 클래스의 필드를 name -> kinds로 변경하면 setInfo,getInfo 메소드 내의 코드는 변경이 필요하다. 하지만 사용자의 호출 코드는 변경하지 않아도 된다. 따라서 유지보수성이 향상된다.  * Java API에서 내부적으로 여러 버전들로 변경될 수는 있지만 사용자가 API를 호출하는 것은 똑같이 하면된다.

=> 메소드를 통해 필드에 간접접근 하는 방법은 만들었으나, 여전히 직접 접근이 가능한 상태이므로 직접접근이 불가하게 강제화(캡슐화)하는 처리가 필요하다.

default는 키워드로 적지 않는다. 그냥 아무거도 적지 않은 것이 default이다.

클래스 선언시 4개중 2개(public,default)만 사용가능하다.

필드는 직접접근 불가능하게 하려면 private을써야한다.

1. 필드 값 통제 x
2. 필드 값 변경 시 사용자 코드 변경 => 유지보수성 악화
직접 접근 x, 간접 접근 o => 캡슐화

필드 = 전역변수=인스턴스변수=속성

캡슐화를하려면 필드는 private,메소드는 public을 붙혀주면 된다.

-캡슐화란?캡슐화는 관련이 있는 변수와 함수를 하나의 클래스로 묶고 외부에서 쉽게 접근하지 못하도록 은닉하는게 핵심입니다.
-캡슐화를 하는 방법
-캡슐화를 하는 이유 대답할 수 있어야함
외부에서 특정 객체의 데이터 및 함수를 직접 접근을 막음으로써 변경을 못하게 하고 유지보수나 확장시 오류의 범위를 최소화 할 수 있고 객체내 정보손상, 오용을 방지하고, 조작법이 바뀌어도 사용방법 자체는 바뀌지 않고, 데이터가 변경되어도 다른 객체에 영향을 주지 않기 때문에 독립성이 좋고,
처리된 결과사용으로 이식성이 좋고, 객체를 모듈화 할 수있어 새로운 시스템의 구성에 하나의 모듈처럼 사용이 가능하다.
-----------------------------------------------------------------------------------------------------

추상화 : 프로그램에 필요한 것들 중 공통적인 것을 추출하고 공통적이지 않은 것을 제거

객체지향프로그래밍(Object Oriented Programming) : 여러가지 프로그래밍을 할 수 있는 방법 중 하나인 방법론이다.
현실 세계의 모든 사건은 객체가 서로 상호작용을 하며 사건이 일어난다.

객체와 객체는 메소드 호출을 통해 서로 상호작용을한다. 

Java에서 객체란?
heap영역에 생성된 메모리 공간,현실세계에 있는 모든 것들->추상화하여 프로그래밍한다.



















